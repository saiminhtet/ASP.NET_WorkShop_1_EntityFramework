//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Testing_WCF.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Food", Namespace="http://schemas.datacontract.org/2004/07/WorkShop_WCF")]
    [System.SerializableAttribute()]
    public partial class Food : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://schemas.datacontract.org/2004/07/WorkShop_WCF")]
    [System.SerializableAttribute()]
    public partial class Order : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChilliField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FoodIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FoodNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MoreSaltField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PepperField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Chilli {
            get {
                return this.ChilliField;
            }
            set {
                if ((object.ReferenceEquals(this.ChilliField, value) != true)) {
                    this.ChilliField = value;
                    this.RaisePropertyChanged("Chilli");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FoodID {
            get {
                return this.FoodIDField;
            }
            set {
                if ((this.FoodIDField.Equals(value) != true)) {
                    this.FoodIDField = value;
                    this.RaisePropertyChanged("FoodID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FoodName {
            get {
                return this.FoodNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FoodNameField, value) != true)) {
                    this.FoodNameField = value;
                    this.RaisePropertyChanged("FoodName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MoreSalt {
            get {
                return this.MoreSaltField;
            }
            set {
                if ((object.ReferenceEquals(this.MoreSaltField, value) != true)) {
                    this.MoreSaltField = value;
                    this.RaisePropertyChanged("MoreSalt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderID {
            get {
                return this.OrderIDField;
            }
            set {
                if ((this.OrderIDField.Equals(value) != true)) {
                    this.OrderIDField = value;
                    this.RaisePropertyChanged("OrderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pepper {
            get {
                return this.PepperField;
            }
            set {
                if ((object.ReferenceEquals(this.PepperField, value) != true)) {
                    this.PepperField = value;
                    this.RaisePropertyChanged("Pepper");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Size {
            get {
                return this.SizeField;
            }
            set {
                if ((object.ReferenceEquals(this.SizeField, value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Size", Namespace="http://schemas.datacontract.org/2004/07/WorkShop_WCF")]
    [System.SerializableAttribute()]
    public partial class Size : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFood", ReplyAction="http://tempuri.org/IService/GetFoodResponse")]
        string GetFood(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFood", ReplyAction="http://tempuri.org/IService/GetFoodResponse")]
        System.Threading.Tasks.Task<string> GetFoodAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListFood", ReplyAction="http://tempuri.org/IService/ListFoodResponse")]
        Testing_WCF.ServiceReference.Food[] ListFood();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListFood", ReplyAction="http://tempuri.org/IService/ListFoodResponse")]
        System.Threading.Tasks.Task<Testing_WCF.ServiceReference.Food[]> ListFoodAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddOrder", ReplyAction="http://tempuri.org/IService/AddOrderResponse")]
        void AddOrder(string user, int foodID, string foodname, string size, string chilli, string salt, string pepper);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddOrder", ReplyAction="http://tempuri.org/IService/AddOrderResponse")]
        System.Threading.Tasks.Task AddOrderAsync(string user, int foodID, string foodname, string size, string chilli, string salt, string pepper);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateOrder", ReplyAction="http://tempuri.org/IService/UpdateOrderResponse")]
        void UpdateOrder(int orderId, int foodid, string size, string chilli, string salt, string pepper);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateOrder", ReplyAction="http://tempuri.org/IService/UpdateOrderResponse")]
        System.Threading.Tasks.Task UpdateOrderAsync(int orderId, int foodid, string size, string chilli, string salt, string pepper);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteOrder", ReplyAction="http://tempuri.org/IService/DeleteOrderResponse")]
        void DeleteOrder(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteOrder", ReplyAction="http://tempuri.org/IService/DeleteOrderResponse")]
        System.Threading.Tasks.Task DeleteOrderAsync(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListOrdersBy", ReplyAction="http://tempuri.org/IService/ListOrdersByResponse")]
        Testing_WCF.ServiceReference.Order[] ListOrdersBy(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListOrdersBy", ReplyAction="http://tempuri.org/IService/ListOrdersByResponse")]
        System.Threading.Tasks.Task<Testing_WCF.ServiceReference.Order[]> ListOrdersByAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListSize", ReplyAction="http://tempuri.org/IService/ListSizeResponse")]
        Testing_WCF.ServiceReference.Size[] ListSize();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListSize", ReplyAction="http://tempuri.org/IService/ListSizeResponse")]
        System.Threading.Tasks.Task<Testing_WCF.ServiceReference.Size[]> ListSizeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOrder", ReplyAction="http://tempuri.org/IService/GetOrderResponse")]
        Testing_WCF.ServiceReference.Order[] GetOrder(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOrder", ReplyAction="http://tempuri.org/IService/GetOrderResponse")]
        System.Threading.Tasks.Task<Testing_WCF.ServiceReference.Order[]> GetOrderAsync(int orderId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Testing_WCF.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Testing_WCF.ServiceReference.IService>, Testing_WCF.ServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetFood(int id) {
            return base.Channel.GetFood(id);
        }
        
        public System.Threading.Tasks.Task<string> GetFoodAsync(int id) {
            return base.Channel.GetFoodAsync(id);
        }
        
        public Testing_WCF.ServiceReference.Food[] ListFood() {
            return base.Channel.ListFood();
        }
        
        public System.Threading.Tasks.Task<Testing_WCF.ServiceReference.Food[]> ListFoodAsync() {
            return base.Channel.ListFoodAsync();
        }
        
        public void AddOrder(string user, int foodID, string foodname, string size, string chilli, string salt, string pepper) {
            base.Channel.AddOrder(user, foodID, foodname, size, chilli, salt, pepper);
        }
        
        public System.Threading.Tasks.Task AddOrderAsync(string user, int foodID, string foodname, string size, string chilli, string salt, string pepper) {
            return base.Channel.AddOrderAsync(user, foodID, foodname, size, chilli, salt, pepper);
        }
        
        public void UpdateOrder(int orderId, int foodid, string size, string chilli, string salt, string pepper) {
            base.Channel.UpdateOrder(orderId, foodid, size, chilli, salt, pepper);
        }
        
        public System.Threading.Tasks.Task UpdateOrderAsync(int orderId, int foodid, string size, string chilli, string salt, string pepper) {
            return base.Channel.UpdateOrderAsync(orderId, foodid, size, chilli, salt, pepper);
        }
        
        public void DeleteOrder(int orderId) {
            base.Channel.DeleteOrder(orderId);
        }
        
        public System.Threading.Tasks.Task DeleteOrderAsync(int orderId) {
            return base.Channel.DeleteOrderAsync(orderId);
        }
        
        public Testing_WCF.ServiceReference.Order[] ListOrdersBy(string name) {
            return base.Channel.ListOrdersBy(name);
        }
        
        public System.Threading.Tasks.Task<Testing_WCF.ServiceReference.Order[]> ListOrdersByAsync(string name) {
            return base.Channel.ListOrdersByAsync(name);
        }
        
        public Testing_WCF.ServiceReference.Size[] ListSize() {
            return base.Channel.ListSize();
        }
        
        public System.Threading.Tasks.Task<Testing_WCF.ServiceReference.Size[]> ListSizeAsync() {
            return base.Channel.ListSizeAsync();
        }
        
        public Testing_WCF.ServiceReference.Order[] GetOrder(int orderId) {
            return base.Channel.GetOrder(orderId);
        }
        
        public System.Threading.Tasks.Task<Testing_WCF.ServiceReference.Order[]> GetOrderAsync(int orderId) {
            return base.Channel.GetOrderAsync(orderId);
        }
    }
}
